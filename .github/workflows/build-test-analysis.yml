## This workflow will trigger on every push or pull request to the main branch. It will run on the ubuntu-latest environment and perform the following steps:
# Job1: 
# Check out the code from the repository.
# Set up Java 17 on the runner.
# Build the project using Maven.
# Run the unit tests using Maven.
# Cache the Maven repository to speed up builds.
# Generate an HTML report of the test results using the JUnit Test Report action.
# Job2:
# Code quality analysis with SonarQube



name: Build-Test-Analysis

on:
  push:
    branches:
      - main

jobs:
  job1:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package
          
      - name: Test with Maven
        run: mvn test
        
      - name: Generate Test Report
        uses: matti/test-reporter-action@v3.0.0
        with:
          reporter: junit-test-reporter
          junit_report_path: ./target/surefire-reports/*.xml
          
      - name: Upload Test Report Artifact
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: junit-html-report
          
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
        
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Analyse with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: >
            mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=hassanonsori
            -Dsonar.projectKey=hassanonsori_timerstopwatch
            -Dsonar.branch.name=main
            -Dsonar.login=$SONAR_TOKEN
            
